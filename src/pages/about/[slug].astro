---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { newtApClient } from "@/api/newtApClient";
import type { Member, Work } from "@/types/newt";
import CustomTypography from "@/components/CustomTypography/index.astro";
import CustomTag from "@/components/CustomTag/index.astro";

export const getStaticPaths = async () => {
	const client = newtApClient();

	const [memberResponse, workResponse] = await Promise.all([
		client.getContents<Member>({
			appUid: "website",
			modelUid: "member",
		}),
		client.getContents<Work>({
			appUid: "website",
			modelUid: "work",
			query: {
				limit: 1000,
			}
		}),
	]);

	const { items: members } = memberResponse;
	const { items: works } = workResponse;
	
	return members.map((member) => {
		const memberWorks = works.filter(work =>
			work.team?.some(teamMember => teamMember.slug === member.slug)
		);

		return {
			params: { slug: member.slug },
			props: {
				member,
				works: memberWorks,
			},
		};
	});
};

const { member, works } = Astro.props;
---
<BaseLayout title={member.name}>
	<section class="body">
		<div class="header">
			<CustomTypography as="h1" variant="title-large">{member.name}</CustomTypography>

			{
				member.domains && (
					<ul class="title-tags">
						{
							member.domains.map((domain) => (
								<li class="title-tags-item">
									<CustomTypography variant="body-large">
										{domain.name}
									</CustomTypography>
								</li>
							))
						}
					</ul>
				)
			}
		</div>

		{
			member.technologyStacks && member.technologyStacks.length > 0 && (
				<div class="tech-stacks">
					<CustomTypography as="h2" variant="title-medium">
						Tech stacks
					</CustomTypography>
					<ul class="tags">
						{
							member.technologyStacks.map((technologyStack) => (
								<li>
									<CustomTag>
										{technologyStack.name}
									</CustomTag>
								</li>
							))
						}
					</ul>
				</div>
			)
		}

		<div class="portrait">
			<img class="portrait-image" src={`${member.portrait.src}?format=webp&width=380&height=380`} srcset={`${member.portrait.src}?format=webp&width=760&height=760`} alt={member.portrait.altText} width={member.portrait.width} height={member.portrait.height} transition:name={`portrait-${member.slug}`} />
		</div>

		{
			works && works.length > 0 && (
				<div class="works">
					<CustomTypography as="h2" variant="title-medium">
						Related works
					</CustomTypography>

					<div class="work-index">
						{
							works.map((work) => (
								<a href={`/works/${work.slug}`} class="work-index-item">
									<div class="work-thumbnail">
										<img src={work.coverImage.src} alt={work.coverImage.altText} width={work.coverImage.width} height={work.coverImage.height} transition:name={`cover-${work.slug}`} />
									</div>
									<CustomTypography as="h2" variant="body-large">{work.title}</CustomTypography>
								</a>
							))
						}
					</div>
				</div>
			)
		}
	</section>
</BaseLayout>

<style>
.body {
	display: block grid;
  gap: var(--gap-md);
  grid-template-columns: repeat(2, 1fr);
	grid-auto-rows: auto;
	align-content: start;
  padding: var(--gap-lg) 0;
	grid-template-areas:
		"header portrait"
		"tech-stacks portrait"
		"works works";
}

.title-tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  color: var(--fg-muted);
  flex-wrap: wrap;
}

.title-tags-item {
  display: flex;
  gap: 0.8rem;
  align-items: center;
}

.title-tags-item + .title-tags-item::before {
  content: "/";
}

.header {
  display: flex;
	flex-direction: column;
  gap: 1.6rem;
	grid-area: header;
}

.tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  flex-wrap: wrap;
}

.tech-stacks {
  display: flex;
  flex-direction: column;
  gap: 1.6rem;
	grid-area: tech-stacks;
}

.portrait {
	grid-area: portrait;
}

.portrait-image {
	width: 100%;
	height: auto;
}

.works {
	grid-area: works;
	display: grid;
	gap: 2.4rem;
}

.work-index {
  display: grid;
  gap: var(--gap-sm);
  list-style: none;
  grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));
}

.work-index-item {
  display: grid;
  grid-template-rows: subgrid;
  gap: 0.8rem;
  grid-row: span 2;
  color: var(--fg-default);
  text-decoration: none;
}

.work-index-item:hover {
  color: var(--fg-default-hover);
}

.work-thumbnail {
  overflow: hidden;
  aspect-ratio: 16 / 9;
  padding: 2.4rem;
  background-color: var(--bg-subtle);
}

.work-index-item:hover .work-thumbnail {
  background-color: var(--bg-muted);
}

.work-thumbnail img,
.work-thumbnail video {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

@media (max-width: 768px) {
	.body {
		grid-template-columns: 1fr;
		grid-template-areas:
			"header"
			"portrait"
			"tech-stacks"
			"works";
	}
}
</style>