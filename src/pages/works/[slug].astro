---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { newtApClient } from "@/api/newtApClient";
import type { Work } from "@/types/newt";
import CustomTypography from "@/components/CustomTypography/index.astro";
import CustomList from "@/components/CustomList/index.astro";
import CustomTag from "@/components/CustomTag/index.astro";

export const getStaticPaths = async () => {
	const client = newtApClient(true);

  const { items: works } = await client.getContents<Work>({
    appUid: "website",
    modelUid: "work",
  });

  return works.map((work) => ({
    params: { slug: work.slug },
    props: { work },
  }));
};

const { work } = Astro.props;
---
<script>
const handleShowDetails = () => {
  document.querySelector(".show-details-button")?.addEventListener("click", () => {
    document.querySelector(".body")?.classList.toggle("show-details");
  });
};

handleShowDetails();

document.addEventListener("astro:after-swap", handleShowDetails);
</script>

<BaseLayout title={work.title}>
  <section class="body">

    <div class="header">
      <div class="title">
        <CustomTypography as="h1" variant="title-large">
          {work.title}
        </CustomTypography>

        {
          work.projectTypes && (
            <ul class="title-tags">
              {
                work.projectTypes.map((projectType) => (
                  <li class="title-tags-item">
                    <CustomTypography variant="body-large">
                      {projectType.name}
                    </CustomTypography>
                  </li>
                ))
              }
            </ul>
          )
        }

        {
          work.url && (
            <CustomTypography>
              <a href={work.url} target="_blank" rel="noopener noreferrer">
                Visit website
              </a>
            </CustomTypography>
          )
        }
      </div>

      {
        work.subtitle && (
          <CustomTypography variant="title-medium" class="subtitle">
            {work.subtitle}
          </CustomTypography>
        )
      }
    </div>

    <div class="hero" transition:name={`cover-${work.slug}`}>
      {
        work.heroVisual?.fileType.match(/video/) ? (
          <video loop muted autoplay>
            <source src={work.heroVisual?.src} type="video/mp4" />
          </video>
        ) : (
          <img src={work.heroVisual?.src} alt={work.heroVisual?.altText} />
        )
      }
    </div>

    <div class="detail">
      {
        work.outline && (
          <div class="outline">
            <CustomTypography variant="body-large">
              {work.outline}
            </CustomTypography>
  
            <CustomTypography as="button" variant="body-large" class="show-details-button">
              <span class="label-show">
                Show details
              </span>

              <span class="label-hide">
                Hide details
              </span>
            </CustomTypography>
          </div>
        )
      }
      
      <div class="specs">
        {
          work.releaseDate && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Published
              </CustomTypography>
              <CustomTypography>
                {new Date(work.releaseDate).toLocaleDateString("en-US", { month: "long", year: "numeric" })}
              </CustomTypography>
            </div>
          )
        }
    
        {
          work.productionPeriod && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Timespan
              </CustomTypography>
              <CustomTypography>
                {work.productionPeriod}
              </CustomTypography>
            </div>
          )
        }
    
        {
          work.client && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Client
              </CustomTypography>
              <CustomTypography>
                {
                  work.client.website ? (
                    <a href={work.client.website} target="_blank" rel="noopener noreferrer">
                      {work.client.name}
                    </a>
                  ) : (
                    work.client.name
                  )
                }
              </CustomTypography>
            </div>
          )
        }
    
        {
          work.partners && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Partners
              </CustomTypography>
              <CustomList>
                {
                  work.partners.map((partner) => (
                    <li>
                      <CustomTypography>
                        {
                          partner.website ? (
                            <a href={partner.website} target="_blank" rel="noopener noreferrer">
                              {partner.name}
                            </a>
                          ) : (
                            partner.name
                          )
                        }
                      </CustomTypography>
                    </li>
                  ))
                }
              </CustomList>
            </div>
          )
        }
    
        {
          work.team && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Team
              </CustomTypography>
              <CustomList>
                {
                  work.team.map((member) => (
                    <li>
                      <CustomTypography>
                        <a href={`/about/${member.slug}`}>
                          {member.name}
                        </a>
                      </CustomTypography>
                    </li>
                  ))
                }
              </CustomList>
            </div>
          )
        }
    
        {
          work.projectTypes && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Project types
              </CustomTypography>
              <CustomList>
                {
                  work.projectTypes.map((projectType) => (
                    <li>
                      <CustomTypography>
                        {projectType.name}
                      </CustomTypography>
                    </li>
                  ))
                }
              </CustomList>
            </div>
          )
        }
    
        {
          work.domains && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Our domains
              </CustomTypography>
              <ul class="tags">
                {
                  work.domains.map((domain) => (
                    <li>
                      <CustomTag>
                        {domain.name}
                      </CustomTag>
                    </li>
                  ))
                }
              </ul>
            </div>
          )
        }
    
        {
          work.technologyStacks && (
            <div class="spec-block">
              <CustomTypography as="h2" variant="title-small">
                Tech stacks
              </CustomTypography>
              <ul class="tags">
                {
                  work.technologyStacks.map((technologyStack) => (
                    <li>
                      <CustomTag>
                        {technologyStack.name}
                      </CustomTag>
                    </li>
                  ))
                }
              </ul>
            </div>
          )
        }
      </div>
    </div>

    {
      work.visuals &&  (
        <div class="visuals">
          {work.visuals.map((visual) => (
            <div>
              {
                visual.fileType.match(/video/) ? (
                  <video loop muted autoplay>
                    <source src={visual.src} type="video/mp4" />
                  </video>
                ) : (
                  <img src={visual.src} alt={visual.altText} />
                )
              }
            </div>
          ))}
        </div>
      )
    }
  </section>
</BaseLayout>

<style>
video {
  width: 100%;
  box-shadow: var(--shadow-lv-1);
}

img {
  width: 100%;
  box-shadow: var(--shadow-lv-1);
}

.body {
  display: block grid;
  gap: var(--gap-md);
  grid-template-columns: repeat(2, 1fr);
  padding: var(--gap-lg) 0;
}

.header {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: var(--gap-md);
  grid-column-start: 1;
  grid-column-end: 3;
}

.title {
  display: grid;
  gap: 1.6rem;
}

.title-tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  color: var(--fg-muted);
  flex-wrap: wrap;
}

.title-tags-item {
  display: flex;
  gap: 0.8rem;
  align-items: center;
}

.title-tags-item + .title-tags-item::before {
  content: "/";
}

.hero {
  grid-column-start: 1;
  grid-column-end: 3;
}

.detail {
  display: flex;
  flex-direction: column;
  align-self: flex-start;
  gap: var(--gap-md);
  padding: var(--gap-md) 0;
}

.visuals {
  display: grid;
  gap: var(--gap-sm);
  grid-column-start: 1;
  grid-column-end: 3;
  grid-template-columns: repeat(2, 1fr);
}

.specs {
  display: none;
}

.show-details .detail {
  position: sticky;
  top: var(--gap-md);
}

.show-details .visuals {
  grid-column-start: 2;
  grid-column-end: 3;
  padding: var(--gap-sm) 0;
  grid-template-columns: 1fr;
}

.show-details .specs {
  display: grid;
  gap: var(--gap-sm);
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
}

.outline {
  display: flex;
  flex-direction: column;
  gap: 2.4rem;
}

.label-show {
  display: inline;
  cursor: pointer;
}

.label-hide {
  display: none;
  cursor: pointer;
}

.show-details .label-hide {
  display: inline;
}

.show-details .label-show {
  display: none;
}

.tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  flex-wrap: wrap;

}

.spec-block {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

.show-details-button {
  background: none;
  border: none;
  cursor: pointer;
  color: var(--fg-accent);
  text-decoration: underline;
  padding: 0;
  display: inline;
  align-self: flex-start;
}

.show-details-button:hover {
  text-decoration: none;
}

@media (max-width: 768px) {
  .header {
    grid-template-columns: 1fr;
  }

  .detail {
    grid-column-start: 1;
    grid-column-end: 3;
    position: relative;
    top: 0;
  }

  .show-details .detail {
    position: relative;
    top: 0;
  }

  .visuals {
    grid-column-start: 1;
    grid-column-end: 3;
    grid-template-columns: 1fr;
  }

  .show-details .visuals {
    grid-column-start: 1;
    grid-column-end: 3;
  }

  .spec-block {
    gap: 0.4rem;
  }
}
</style>