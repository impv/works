---
import ContentPageLayout from "@/layouts/ContentPageLayout.astro";
import { newtApiClient } from "@/api/newtApiClient";
import type { Work } from "@/types/newt";
import CustomTypography from "@/components/CustomTypography/index.astro";
import CustomList from "@/components/CustomList/index.astro";
import CustomTag from "@/components/CustomTag/index.astro";
import ExternalLinkIcon from "@/components/Icons/ExternalLinkIcon.astro";

export const getStaticPaths = async () => {
	const client = newtApiClient(true);

  const { items: works } = await client.getContents<Work>({
    appUid: "website",
    modelUid: "work",
    query: {
      depth: 2
    },
  });

  return works.map((work) => ({
    params: { slug: work.slug },
    props: { work },
  }));
};

const { work } = Astro.props;
---
<ContentPageLayout title={work.title}>
  <section class="body">

    <div class="header">
      <div class="title">
        <CustomTypography as="h1" variant="title-large">
          {work.title}
        </CustomTypography>

        {
          work.projectTypes && (
            <ul class="title-tags">
              {
                work.projectTypes.map((projectType) => (
                  <li class="title-tags-item">
                    <CustomTypography variant="body-large">
                      {projectType.name}
                    </CustomTypography>
                  </li>
                ))
              }
            </ul>
          )
        }

        {
          work.url && (
            <CustomTypography>
              <a href={work.url} target="_blank" rel="noopener noreferrer">
                Visit website
                <ExternalLinkIcon />
              </a>
            </CustomTypography>
          )
        }
      </div>

      {
        work.subtitle && (
          <CustomTypography variant="title-medium" class="subtitle">
            {work.subtitle}
          </CustomTypography>
        )
      }
    </div>

    <div class="hero" transition:name={`cover-${work.slug}`}>
      {
        work.heroVisual?.fileType.match(/video/) ? (
          <video loop muted autoplay playsinline width={work.heroVisual?.width} height={work.heroVisual?.height} poster={`${work.coverImage.src}?format=webp`}>
            <source src={`${work.heroVisual?.src}?format=webm&size=1520`} type="video/webm" />
          </video>
        ) : (
          <img src={`${work.heroVisual?.src}?format=webp`} srcset={`${work.heroVisual?.src}?format=webp`} alt={work.heroVisual?.altText} width={work.heroVisual?.width} height={work.heroVisual?.height} />
        )
      }
    </div>

    {
      work.outline && (
        <div class="outline">
          <CustomTypography variant="body-large">
            {work.outline}
          </CustomTypography>
        </div>
      )
    }

    {
      work.visuals &&  (
        <div class="visuals">
          {work.visuals.map((visual) => (
            <div>
              {
                visual.fileType.match(/video/) ? (
                  <video loop muted autoplay width={visual.width} height={visual.height}>
                    <source src={visual.src} type="video/mp4" />
                  </video>
                ) : (
                  <img src={`${visual.src}?format=webp&fit=outside&width=732`} srcset={`${visual.src}?format=webp&fit=outside&width=1464 2x`} width={visual.width} height={visual.height} alt={visual.altText} />
                )
              }
            </div>
          ))}
        </div>
      )
    }

    <div class="specs">
      {
        work.releaseDate && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Published
            </CustomTypography>
            <CustomTypography>
              {new Date(work.releaseDate).toLocaleDateString("en-US", { month: "long", year: "numeric" })}
            </CustomTypography>
          </div>
        )
      }

      {
        work.productionPeriod && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Timespan
            </CustomTypography>
            <CustomTypography>
              {work.productionPeriod}
            </CustomTypography>
          </div>
        )
      }

      {
        work.client && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Client
            </CustomTypography>
            <CustomTypography>
              {
                work.client.website ? (
                  <a href={work.client.website} target="_blank" rel="noopener noreferrer">
                    {work.client.name}
                    <ExternalLinkIcon />
                  </a>
                ) : (
                  work.client.name
                )
              }
            </CustomTypography>
          </div>
        )
      }

      {
        work.partners && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Partners
            </CustomTypography>
            <CustomList>
              {
                work.partners.map((partner) => (
                  <li>
                    <CustomTypography>
                      {
                        partner.website ? (
                          <a href={partner.website} target="_blank" rel="noopener noreferrer">
                            {partner.name}
                            <ExternalLinkIcon />
                          </a>
                        ) : (
                          partner.name
                        )
                      }
                    </CustomTypography>
                  </li>
                ))
              }
            </CustomList>
          </div>
        )
      }

      {
        work.team && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Team
            </CustomTypography>
            <ul class="member_list">
              {
                work.team.map((member) => (
                  <li>
                    <CustomTypography>
                      <a class="member" href={`/about/${member.slug}`} data-astro-prefetch>
                        <img class="member_avatar" src={`${member.portrait.src}?format=webp&width=30&height=30`} srcset={`${member.portrait.src}?format=webp&width=62&height=62`} alt={member.portrait.altText} width="30" height="30" transition:name={`portrait-${member.slug}`} />
                        {member.name}
                      </a>
                    </CustomTypography>
                  </li>
                ))
              }
            </ul>
          </div>
        )
      }

      {
        work.projectTypes && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Project types
            </CustomTypography>
            <CustomList>
              {
                work.projectTypes.map((projectType) => (
                  <li>
                    <CustomTypography>
                      {projectType.name}
                    </CustomTypography>
                  </li>
                ))
              }
            </CustomList>
          </div>
        )
      }

      {
        work.domains && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Our domains
            </CustomTypography>
            <ul class="tags">
              {
                work.domains.map((domain) => (
                  <li>
                    <CustomTag title={domain.description}>
                      {domain.name}
                    </CustomTag>
                  </li>
                ))
              }
            </ul>
          </div>
        )
      }

      {
        work.technologyStacks && (
          <div class="spec-block">
            <CustomTypography as="h2" variant="title-small">
              Tech stacks
            </CustomTypography>
            <ul class="tags">
              {
                work.technologyStacks.map((technologyStack) => (
                  <li>
                    <CustomTag>
                      {technologyStack.name}
                    </CustomTag>
                  </li>
                ))
              }
            </ul>
          </div>
        )
      }
    </div>
  </section>
</ContentPageLayout>

<style>
img,
video {
  width: 100%;
  aspect-ratio: attr(width) / attr(height);
}

.body {
  display: block grid;
  gap: var(--gap-medium);
  grid-template-columns: repeat(2, 1fr);
}

.header {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: var(--gap-medium);
  grid-column-start: 1;
  grid-column-end: 3;
}

.title {
  display: grid;
  gap: 1.6rem;
}

.title-tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  color: var(--fg-subtle);
  flex-wrap: wrap;
}

.title-tags-item {
  display: flex;
  gap: 0.8rem;
  align-items: center;
}

.title-tags-item + .title-tags-item::before {
  content: "/";
}

.hero {
  grid-column-start: 1;
  grid-column-end: 3;
}

.visuals {
  display: grid;
  gap: var(--gap-small);
  grid-column-start: 1;
  grid-column-end: 3;
  grid-template-columns: repeat(2, 1fr);
}

.visuals video,
.visuals img {
  object-fit: contain;
  width: 100%;
  height: auto;
}

.specs {
  display: grid;
  gap: var(--gap-medium);
  grid-column-start: 1;
  grid-column-end: 3;
  grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
  padding: var(--gap-medium);
  background-color: var(--bg-muted);
}

.outline {
  display: flex;
  flex-direction: column;
  gap: 2.4rem;
  padding: var(--gap-small) 0;
}

.label-show {
  display: inline;
  cursor: pointer;
}

.label-hide {
  display: none;
  cursor: pointer;
}

.tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  flex-wrap: wrap;

}

.spec-block {
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

.member_avatar {
  border: 1px solid var(--border-default);
  width: 30px;
  height: 30px;
  border-radius: 32px;
}

.member {
  display: flex;
  gap: 0.6rem;
}

.member_list {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 0.8rem;
}

.member:hover .member_avatar {
  border-color: var(--border-accent);
}

@media (max-width: 768px) {
  .header {
    grid-template-columns: 1fr;
  }

  .detail {
    grid-column-start: 1;
    grid-column-end: 3;
    top: 0;
  }

  .visuals {
    grid-column-start: 1;
    grid-column-end: 3;
    grid-template-columns: 1fr;
  }

  .spec-block {
    gap: 0.4rem;
  }

  .outline {
    grid-column-start: 1;
    grid-column-end: 3;
  }
}
</style>