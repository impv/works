---
import ContentPageLayout from "@/layouts/ContentPageLayout.astro";
import { newtApiClient } from "@/api/newtApiClient";
import { getFeed, filterItemsByMemberSlugs } from "@/api/rssClient";
import type { Member, Work } from "@/types/newt";
import CustomTypography from "@/components/CustomTypography/index.astro";
import ExternalLinkIcon from "@/components/Icons/ExternalLinkIcon.astro";

export const getStaticPaths = async () => {
	const client = newtApiClient();

	const [memberResponse, workResponse, feedResponse] = await Promise.all([
		client.getContents<Member>({
			appUid: "website",
			modelUid: "member",
		}),
		client.getContents<Work>({
			appUid: "website",
			modelUid: "work",
			query: {
				limit: 1000,
			}
		}),
		getFeed(),
	]);

	const { items: members } = memberResponse;
	const { items: works } = workResponse;
	
	return members.map((member) => {
		const memberWorks = works.filter(work =>
			work.team?.some(teamMember => teamMember.slug === member.slug)
		);

		return {
			params: { slug: member.slug },
			props: {
				member,
				works: memberWorks,
				podcasts: filterItemsByMemberSlugs(feedResponse.items, [member.slug]),
			},
		};
	});
};

const { member, works, podcasts } = Astro.props;
---
<ContentPageLayout title={member.name}>
	<section class="body">
		<div class="header">
			<div class="profile">
				<CustomTypography as="h1" variant="display">{member.name}</CustomTypography>

				{
					member.positions && (
						<ul class="positions">
							{
								member.positions.map((position) => (
									<li>
										<CustomTypography variant="title-small" title={position.description}>
											{position.name}
										</CustomTypography>
									</li>
								))
							}
						</ul>
					)
				}

				{
					member.domains && (
						<ul class="title-tags">
							{
								member.domains.map((domain) => (
									<li class="title-tags-item">
										<CustomTypography title={domain.description} color="subtle">
											{domain.name}
										</CustomTypography>
									</li>
								))
							}
						</ul>
					)
				}
			</div>
		</div>

		<div class="portrait">
			<img class="portrait-image" src={`${member.portrait.src}?format=webp&width=724&height=724`} srcset={`${member.portrait.src}?format=webp&width=1448&height=1448`} alt={member.portrait.altText} width={member.portrait.width} height={member.portrait.height} transition:name={`portrait-${member.slug}`} />
			{
				member.portraitEyesClosed && (
					<img class="portrait-eyes-closed-image" src={`${member.portraitEyesClosed.src}?format=webp&width=724&height=724`} srcset={`${member.portraitEyesClosed.src}?format=webp&width=1448&height=1448`} alt={member.portraitEyesClosed.altText} width={member.portraitEyesClosed.width} height={member.portraitEyesClosed.height} transition:name={`portrait-${member.slug}`} />
				)
			}
		</div>

		{
			works && works.length > 0 && (
				<div class="works">
					<CustomTypography as="h2" variant="title-medium">
						Related works
					</CustomTypography>

					<div class="work-index">
						{
							works.map((work) => (
								<a href={`/works/${work.slug}`} class="work-index-item" data-astro-prefetch>
									<div class="work-thumbnail">
										<img src={work.coverImage.src} alt={work.coverImage.altText} width={work.coverImage.width} height={work.coverImage.height} />
									</div>
									<CustomTypography as="h2" variant="body-large">{work.title}</CustomTypography>
								</a>
							))
						}
					</div>
				</div>
			)
		}

		{
			podcasts && podcasts.length > 0 && (
				<div class="podcasts">
					<CustomTypography as="h2" variant="title-medium">
						Podcasts
					</CustomTypography>

					<div class="podcast-list">
						{
							podcasts.map((podcast) => (
								<a href={podcast.link} target="_blank" rel="noopener noreferrer" class="podcast-list-item">
									<CustomTypography as="h3" variant="title-small">
										{podcast.title}
										<ExternalLinkIcon />
									</CustomTypography>

									<CustomTypography variant="body-large" class="podcast-list-item-description">
										{podcast.contentSnippet}
									</CustomTypography>
				
									<CustomTypography variant="body-large" class="podcast-list-item-date">
										{new Date(podcast.pubDate).toLocaleDateString("en-US", { month: "long", year: "numeric", day: "numeric"})}
									</CustomTypography>
								</a>
							))
						}
					</div>
				</div>
			)
		
		}
	</section>
</ContentPageLayout>

<style>
.body {
	display: block grid;
  gap: var(--gap-medium);
  grid-template-columns: repeat(2, 1fr);
	grid-auto-rows: auto;
	align-content: start;
	grid-template-areas:
		"header portrait"
		"works works"
		"podcasts podcasts"
	;
}

.title-tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  flex-wrap: wrap;
}

.title-tags-item {
  display: flex;
  gap: 0.6rem;
  align-items: center;
}

.title-tags-item:not(:nth-last-child(1))::after {
  content: "/";
	color: var(--fg-muted);
}

.header {
  display: flex;
	flex-direction: column;
  gap: var(--gap-small);
	grid-area: header;
	justify-content: center;
}

.positions {
	list-style-type: none;
}

.profile {
	display: flex;
	flex-direction: column;
	gap: 1.6rem;
}

.tags {
  display: flex;
  gap: 0.8rem;
  list-style-type: none;
  flex-wrap: wrap;
}

.tech-stacks {
  display: flex;
  flex-direction: column;
  gap: 1.6rem;
	padding: var(--gap-small) 0;
}

.portrait {
	grid-area: portrait;
	display: grid;
}

.portrait-image,
.portrait-eyes-closed-image {
	width: 100%;
	height: auto;
	grid-column: 1 / 2;
	grid-row: 1 / 2;
}


.portrait-eyes-closed-image {
	animation: blink 8s infinite;
	pointer-events: none;
}

@keyframes blink {
	0%, 49%, 51%, 95%, 97%, 98% {
		visibility: hidden;
	}

	50%, 96%, 100% {
		visibility: visible;
	}
}

.works {
	grid-area: works;
	display: grid;
	gap: 2.4rem;
	padding: var(--gap-medium) 0;
}

.work-index {
  display: grid;
  gap: var(--gap-small);
  list-style: none;
  grid-template-columns: repeat(auto-fill, minmax(270px, 1fr));
}

.work-index-item {
  display: grid;
  grid-template-rows: subgrid;
  gap: 0.8rem;
  grid-row: span 2;
  color: var(--fg-default);
  text-decoration: none;
}

.work-index-item:hover {
  color: var(--fg-default-hover);
}

.work-thumbnail {
  overflow: hidden;
  aspect-ratio: 16 / 9;
  padding: 2.4rem;
  background-color: var(--bg-subtle);
}

.work-index-item:hover .work-thumbnail {
  background-color: var(--bg-subtle-hover);
}

.work-thumbnail img,
.work-thumbnail video {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

.podcasts {
	grid-area: podcasts;
	display: grid;
	gap: 2.4rem;
	padding: var(--gap-medium) 0;
}

.podcast-list {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(40%, 1fr));
	gap: 0 var(--gap-small);
}

.podcast-list-item {
	display: flex;
	flex-direction: column;
	gap: 0.4rem;
	padding: 2.4rem;
	border-top: 1px solid var(--border-default);
	border-bottom: 1px solid var(--border-default);
	margin-top: -1px;
	text-decoration: none;
	color: currentColor;
}

.podcast-list-item:hover {
	background-color: var(--bg-default-hover);
}

.podcast-list-item-description {
	color: var(--fg-subtle);
	overflow: hidden;
	display: -webkit-box;
	-webkit-line-clamp: 2;
	-webkit-box-orient: vertical;
}

.podcast-list-item-date {
	color: var(--fg-subtle);
}

.more-link {
	justify-self: flex-end;
}

@media (max-width: 768px) {
	.body {
		grid-template-columns: 1fr;
		grid-template-areas:
			"portrait"
			"header"
			"works"
			"podcasts"
		;
	}

	.podcast-list {
		grid-template-columns: 1fr;
	}

	.podcast-list-item {
		padding: 1.6rem 0;
	}
}
</style>